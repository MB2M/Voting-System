{"version":3,"sources":["getWeb3.js","components/AdminRegister.jsx","components/Admin.jsx","components/Proposal.jsx","components/Proposals.jsx","components/Voter.jsx","components/Voting.jsx","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","on","accounts","location","reload","console","log","provider","providers","HttpProvider","AdminRegister","state","handleEvent","whiteListRef","useRef","useState","actualAddressMessage","setActualAddressMessage","isInputAddress","setIsInputAddress","isWhiteListed","setIsWhiteListed","handleSubmit","type","address","current","value","contract","methods","addVoter","send","from","add","address_event","events","VoterRegistered","returnValues","_voterAddress","message","handleInput","removeVoter","whiteListed","voters","call","isRegistered","input","utils","isAddress","className","htmlFor","id","ref","onChange","aria-describedby","onClick","Admin","votingStatus","status","handleButtonClick","i","startProposalRegistration","next","endProposalRegistration","startVotingSession","endVotingSession","closeVoting","WorkflowStatusChange","_newStatus","map","key","disabled","buttonText","Proposal","proposal","children","badge","description","voteCount","Proposals","voter","updateVoter","proposals","setProposals","subscribeProposalRegisteredEvent","ProposalRegistered","event","getProposals","changed","str","subscribeVotedEvent","Voted","viewProposals","useEffect","handleClick","index","vote","voteEventProposalId","_proposalId","error","length","p","hasVoted","votedProposalId","VoteButton","Voter","inputRef","addProposal","propose","proposalId","Voting","isAdmin","setIsAdmin","setVoter","setVotingStatus","eventMessage","setEventMessage","winningProposals","setWinningProposals","STATUS","0","label","1","2","3","4","5","newStatus","workflowStatus","votingState","parseInt","owner","getWinningProposals","winningProposal","winnings","timer","setTimeout","clearTimeout","App","setState","eth","getAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","instance","Contract","abi","alert","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.618b34d9.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n          window.ethereum.on('accountsChanged', (accounts) => {\n            window.location.reload();\n          });\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { useEffect, useLayoutEffect, useState, useRef } from \"react\"\n\nfunction AdminRegister({ state, handleEvent }) {\n    const whiteListRef = useRef()\n    const [actualAddressMessage, setActualAddressMessage] = useState('')\n    const [isInputAddress, setIsInputAddress] = useState(false)\n    const [isWhiteListed, setIsWhiteListed] = useState(false)\n\n    const handleSubmit = async (type) => {\n        let address = whiteListRef.current.value\n        try {\n            switch (type) {\n                case 'add':\n                    const add = await state.contract.methods.addVoter(address).send({ from: state.accounts[0] });\n                    let address_event = add.events.VoterRegistered.returnValues._voterAddress\n                    let message = `Address ${address_event} has been added to the whitelist`\n                    handleEvent(message)\n                    handleInput()\n                    break;\n                case 'remove':\n                    const remove = await state.contract.methods.removeVoter(address).send({ from: state.accounts[0] });\n                    handleInput()\n                    break;\n                default:\n                    break;\n            }\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    const whiteListed = async (address) => {\n        let voter = await state.contract.methods.voters(address).call()\n        if (voter.isRegistered) {\n            setIsWhiteListed(true)\n            setActualAddressMessage('This address is whitelisted')\n        } else {\n            setActualAddressMessage('This address is NOT whitelisted')\n            setIsWhiteListed(false)\n        }\n    }\n\n    const handleInput = () => {\n        let input = whiteListRef.current.value\n        if (state.web3.utils.isAddress(input)) {\n            setIsInputAddress(true)\n            whiteListed(input)\n        } else {\n            setIsInputAddress(false)\n            setActualAddressMessage('not a valid address')\n            setIsWhiteListed(false)\n        }\n    }\n\n    return (\n        <div className=\"admin-register mx-auto\">\n            <label htmlFor=\"addressInput\">Enter Address: </label>\n            <input id=\"addressInput\" type=\"text\" ref={whiteListRef} onChange={handleInput} className=\"form-control\" aria-describedby=\"addressHelpBlock\" />\n            <div id=\"addressHelpBlock\" className=\"form-text\"><span>{actualAddressMessage}</span></div>\n            <div>\n                {isInputAddress && (\n                    !isWhiteListed ?\n                        <button className=\"btn btn-success w-100\" onClick={() => handleSubmit(\"add\")}>add it</button> :\n                        <button className=\"btn btn-danger\" onClick={() => handleSubmit(\"remove\")}>remove it</button>\n                )}\n            </div>\n        </div>\n    )\n\n}\n\nexport default AdminRegister","import React, { useEffect, useLayoutEffect, useState, useRef } from \"react\"\nimport AdminRegister from \"./AdminRegister\"\n\nfunction Admin({ votingStatus, state, handleEvent, status }) {\n\n    const handleButtonClick = async (i) => {\n        let next;\n        try {\n            switch (i) {\n                case 0:\n                    next = await state.contract.methods.startProposalRegistration().send({ from: state.accounts[0] });\n                    break;\n                case 1:\n                    next = await state.contract.methods.endProposalRegistration().send({ from: state.accounts[0] });\n                    break;\n                case 2:\n                    next = await state.contract.methods.startVotingSession().send({ from: state.accounts[0] });\n                    break;\n                case 3:\n                    next = await state.contract.methods.endVotingSession().send({ from: state.accounts[0] });\n                    break;\n                case 4:\n                    next = await state.contract.methods.closeVoting().send({ from: state.accounts[0] });\n                    break;\n                default:\n                    break;\n            }\n\n            let status = next.events.WorkflowStatusChange.returnValues._newStatus\n            let message = `Workflow status is updated to ${status}`\n            handleEvent(message)\n\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    return (\n        <div className=\"row mt-5 border p-2 align-items-center\">\n            <h1 className=\"admin__title\">Admin Zone</h1>\n            <div className=\"col-3 admin__workflow d-grid gap-2 \">\n                {[0, 1, 2, 3, 4].map((i) => {\n                    return (\n                        <button onClick={() => handleButtonClick(i)}\n                            key={i}\n                            className={\"btn \" + (votingStatus === i ? \"btn-primary\" : \"btn-info\")}\n                            disabled={votingStatus != i && true}>\n                            {status[i].buttonText}\n                        </button>\n                    )\n                })}\n            </div>\n            <div className=\"col-9\">\n                {votingStatus === 0 && <AdminRegister state={state} handleEvent={handleEvent} status={status} />}\n            </div>\n\n        </div>\n    )\n\n}\n\nexport default Admin","import React, { useEffect, useState } from \"react\"\n\nfunction Proposal({ proposal, children, badge }) {\n\n    return (\n        <>\n            <h5>{proposal.description} {badge}</h5>\n            <div className=\"d-flex justify-content-around\">\n                <span>{proposal.voteCount} voters</span>\n                {children}\n            </div>\n        </>\n    )\n\n}\n\nexport default Proposal","import React, { useEffect, useState } from \"react\"\nimport Proposal from \"./Proposal\";\n\nfunction Proposals({ votingStatus, state, voter, handleEvent, updateVoter }) {\n    const [proposals, setProposals] = useState([]);\n\n    const subscribeProposalRegisteredEvent = async () => {\n        await state.contract.events.ProposalRegistered()\n            .on('data', event => {\n                getProposals()\n            })\n            .on('changed', changed => console.log(changed))\n            // .on('error', err => throw err)\n            .on('connected', str => console.log(str))\n    }\n\n    const subscribeVotedEvent = async () => {\n        await state.contract.events.Voted()\n            .on('data', event => {\n                getProposals()\n            })\n            .on('changed', changed => console.log(changed))\n            // .on('error', err => throw err)\n            .on('connected', str => console.log(str))\n    }\n\n    const getProposals = async () => {\n        let proposals = await state.contract.methods.viewProposals().call()\n        setProposals(proposals)\n    }\n\n\n    useEffect(() => {\n        subscribeProposalRegisteredEvent();\n        subscribeVotedEvent();\n        getProposals();\n    }, [])\n\n    const handleClick = async (index) => {\n        try {\n            const vote = await state.contract.methods.vote(index).send({ from: state.accounts[0] })\n            const voteEventProposalId = vote.events.Voted.returnValues._proposalId\n            updateVoter()\n            let message = `You have correctly voted for proposal ${proposals[voteEventProposalId][0]}`\n            handleEvent(message)\n\n        } catch (error) {\n            console.error(error)\n        }\n    }\n\n\n    return (\n        <div className=\"proposal border\">\n            <h1>List of proposals:</h1>\n            <h5><i>(Total: {proposals.length})</i></h5>\n            <ul className=\"list-group\">\n                {proposals.map((p, i) =>\n                    <li className=\"list-group-item\" key={i}>\n                        <Proposal \n                        proposal={p} \n                        badge={voter && voter.hasVoted && voter.votedProposalId == i && <span className=\"badge bg-success\">Your Vote</span>}\n                        VoteButton={votingStatus === 3 &&\n                                (voter && !voter.hasVoted) &&\n                                <button className=\"btn btn-success\" onClick={() => handleClick(i)}>Vote for</button>}\n                        >\n                        </Proposal>\n                    </li>\n                )}\n            </ul>\n        </div>\n    )\n}\n\nexport default Proposals","import React, { useRef, useState } from \"react\"\n\nfunction Voter({ votingStatus, state, handleEvent, }) {\n    const inputRef = useRef(\"\");\n\n    const handleSubmit = () => {\n        (async () => {\n            let proposal = inputRef.current.value\n            if (proposal !== \"\") {\n                const propose = await state.contract.methods.addProposal(proposal).send({ from: state.accounts[0] })\n                let proposalId = propose.events.ProposalRegistered.returnValues._proposalId\n                let message = `You proposal has been added to the list with id: ${proposalId}`\n                handleEvent(message)\n            }\n        })()\n    }\n\n    return (\n        <div className=\"voter\">\n            {votingStatus === 1 && (\n                <>\n                    <label htmlFor=\"proposalInput\">Feel free to add a new proposal:</label>\n                    <input id=\"proposalInput\" type=\"text\" ref={inputRef} className=\"form-control\" />\n                    <button className=\"btn btn-success\" onClick={handleSubmit}>Propose</button>\n                </>\n            )}\n        </div>\n    )\n}\n\nexport default Voter","import React, { useEffect, useLayoutEffect, useState } from \"react\"\nimport Admin from \"./Admin\";\nimport Proposals from \"./Proposals\"\nimport Voter from \"./Voter\";\nimport Proposal from \"./Proposal\";\n\nfunction Voting({ state }) {\n    const [isAdmin, setIsAdmin] = useState(false);\n    const [voter, setVoter] = useState({})\n    const [votingStatus, setVotingStatus] = useState(0)\n    const [eventMessage, setEventMessage] = useState('')\n    const [winningProposals, setWinningProposals] = useState([])\n\n\n    const STATUS = {\n        0: { label: \"Voting has not started, whitelisting in progress\", buttonText: \"START PROPOSAL SESSION\" },\n        1: { label: \"Please submit proposals\", buttonText: \"END PROPOSAL SESSION\" },\n        2: { label: \"Proposal session has end, please wait for voting session to open\", buttonText: \"START VOTING SESSION\" },\n        3: { label: \"Voting session is open, please vote\", buttonText: \"END VOTING SESSION\" },\n        4: { label: \"Vote has ended, wait for counting\", buttonText: \"TALLY VOTE\" },\n        5: { label: \"Result of the voting session\" }\n    }\n\n    useEffect(() => {\n        (async function () {\n            await state.contract.events.WorkflowStatusChange()\n                .on('data', event => {\n                    let newStatus = event.returnValues._newStatus;\n                    setVotingStatus(newStatus);\n                })\n                .on('changed', changed => console.log(changed))\n                // .on('error', err => throw err)\n                .on('connected', str => console.log(str))\n        })()\n    }, [])\n\n\n    useEffect(() => {\n        (async function () {\n            let votingState = await state.contract.methods.workflowStatus().call()\n            setVotingStatus(parseInt(votingState))\n        })()\n    })\n\n    useEffect(() => {\n        (async function () {\n            let owner = await state.contract.methods.owner().call()\n\n            if (state.accounts[0] === owner) {\n                setIsAdmin(true)\n            } else {\n                setIsAdmin(false)\n            }\n\n            updateVoter()\n        })()\n    }, [state])\n\n\n    useEffect(() => {\n        if (votingStatus === 5) {\n            getWinningProposals()\n        }\n    }, [votingStatus])\n\n    const getWinningProposals = async () => {\n        let winnings = await state.contract.methods.winningProposal().call()\n        setWinningProposals(winnings)\n    }\n\n    const updateVoter = async () => {\n        let voter = await state.contract.methods.voters(state.accounts[0]).call()\n        setVoter(voter)\n    }\n\n    const handleEvent = (message) => {\n        setEventMessage(message)\n        const timer = setTimeout(() => setEventMessage(''), 5000)\n        return () => clearTimeout(timer)\n    }\n\n\n    return (\n        <div className=\"voting container\">\n            {eventMessage != \"\" && <div className=\"alert alert-primary\">{eventMessage}</div>}\n            <h1>{STATUS[votingStatus].label}</h1>\n            {isAdmin && <Admin votingStatus={votingStatus} state={state} handleEvent={handleEvent} status={STATUS} />}\n            {votingStatus === 5 &&\n                <div>\n                    <h5>Winning proposal(s):</h5>\n                    <span>{winningProposals.map(p => <Proposal proposal={p}></Proposal>)}</span>\n                </div>}\n            <div className=\"vote-info row align-items-center mt-5 justify-content-center\">\n                <div className=\"col-4\">\n                    {votingStatus > 0 && <Proposals votingStatus={votingStatus} state={state} voter={voter} handleEvent={handleEvent} updateVoter={updateVoter} />}\n                </div>\n                <div className=\"col-7\">\n                    {voter && voter.isRegistered && <Voter votingStatus={votingStatus} state={state} handleEvent={handleEvent} />}\n                </div>\n            </div>\n            \n        </div>\n    )\n}\n\nexport default Voting","import React, { useEffect, useState, useRef } from \"react\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\nimport Voting from \"./components/Voting\";\n\nfunction App() {\n  const [state, setState] = useState({ web3: null, accounts: null, contract: null });\n  \n  useEffect(() => {\n    (async function () {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3();\n\n        // Use web3 to get the user's accounts.\n        const accounts = await web3.eth.getAccounts();\n        \n        // Get the contract instance.\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VotingContract.networks[networkId];\n        const instance = new web3.eth.Contract(\n          VotingContract.abi,\n          deployedNetwork && deployedNetwork.address,\n        );\n        // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n        setState({ web3: web3, accounts: accounts, contract: instance });\n\n\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\n          `Failed to load web3, accounts, or contract. Check console for details.`,\n        );\n        console.error(error);\n      }\n    })();\n  }, [])\n\n  return (\n    <div className=\"App\">\n      { state.contract !== null && <Voting state={state} />}\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}